{"version":3,"sources":["AnalogWatch.tsx","index.tsx"],"names":["AnalogWatch","canvasRef","useRef","useEffect","canvas","current","WIDTH","width","HEIGHT","height","dpr","window","devicePixelRatio","ctx","getContext","scale","style","angle","hours","minutes","seconds","getRadians","degrees","Math","PI","update","clearRect","Date","getHours","getMinutes","getSeconds","save","translate","rotate","beginPath","moveTo","lineTo","lineWidth","font","textAlign","fillText","toString","stroke","restore","strokeStyle","draw","setTimeout","ref","ReactDOM","render","document","getElementById"],"mappings":"iPAkHeA,G,KA/Ge,WAC5B,IAAMC,EAAYC,iBAAiC,MA2GnD,OAzGAC,oBAAU,WACR,IAAMC,EAASH,EAAUI,QAEzB,GAAKD,EAAL,CAIA,IAAME,EAAQF,EAAOG,MACfC,EAASJ,EAAOK,OAChBC,EAAMC,OAAOC,kBAAoB,EACjCC,EAAuCT,EAAOU,WAAW,MAE/D,GAAKD,EAAL,CAIAT,EAAOG,MAAQD,EAAQI,EACvBN,EAAOK,OAASD,EAASE,EACzBG,EAAIE,MAAML,EAAKA,GACfN,EAAOY,MAAMT,MAAQD,EAAQ,KAC7BF,EAAOY,MAAMP,OAASD,EAAS,KAE/B,IACIS,EAAQ,EACRC,EAAQ,EACRC,EAAU,EACVC,EAAU,EAERC,EAAa,SAACC,GAAD,OAAsBC,KAAKC,GAAK,IAAOF,IAkE3C,SAATG,IACJZ,EAAIa,UAAU,EAAG,EAAGpB,EAAOE,GAjEhB,WAQX,IAPAU,GAAQ,IAAIS,MAAOC,WACnBT,GAAU,IAAIQ,MAAOE,aACrBT,GAAU,IAAIO,MAAOG,aAKhBb,EAAQ,EAAGA,EAAQ,IAAKA,GAAS,EACpCJ,EAAIkB,OACJlB,EAAImB,UAAU1B,EAAQ,EAAGE,EAAS,GAClCK,EAAIoB,OAAOZ,EAAWJ,IACtBJ,EAAIqB,YACJrB,EAAIsB,OAAO,GArBA,KAuBPlB,EAAQ,KAAO,GACjBJ,EAAIuB,OAAO,GAAG,IACdvB,EAAIwB,UAAY,EAEhBxB,EAAIyB,KAAO,aACXzB,EAAI0B,UAAY,SAChB1B,EAAI2B,UAAUvB,EAAQ,IAAM,IAAIwB,WAAY,GAAG,KAE/C5B,EAAIuB,OAAO,GAAG,IAGhBvB,EAAI6B,SACJ7B,EAAI8B,UAGJ9B,EAAIkB,OACJlB,EAAIwB,UAAY,EAChBxB,EAAImB,UAAU1B,EAAQ,EAAGE,EAAS,GAClCK,EAAIoB,OAAOZ,EAAmB,GAARH,EAAuB,GAAVC,IACnCN,EAAIqB,YACJrB,EAAIsB,OAAO,EAAG,IACdtB,EAAIuB,OAAO,GAAG,IACdvB,EAAI6B,SACJ7B,EAAI8B,UAGJ9B,EAAIkB,OACJlB,EAAIwB,UAAY,EAChBxB,EAAImB,UAAU1B,EAAQ,EAAGE,EAAS,GAClCK,EAAIoB,OAAOZ,EAAqB,EAAVF,IACtBN,EAAIqB,YACJrB,EAAIsB,OAAO,EAAG,IACdtB,EAAIuB,OAAO,GAAG,IACdvB,EAAI6B,SACJ7B,EAAI8B,UAGJ9B,EAAIkB,OACJlB,EAAI+B,YAAc,MAClB/B,EAAImB,UAAU1B,EAAQ,EAAGE,EAAS,GAClCK,EAAIoB,OAAOZ,EAAqB,EAAVD,IACtBP,EAAIqB,YACJrB,EAAIsB,OAAO,EAAG,IACdtB,EAAIuB,OAAO,GAAG,IACdvB,EAAI6B,SACJ7B,EAAI8B,UAMNE,GACAC,WAAW,WACTrB,KACC,KAGLA,MACC,IAEI,4BAAQlB,MAAM,MAAME,OAAO,MAAMsC,IAAK9C,MC3G/C+C,IAASC,OAAO,kBAAC,EAAD,MAAiBC,SAASC,eAAe,W","file":"static/js/main.fc91b7da.chunk.js","sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport './AnalogWatch.css';\n\nconst AnalogWatch: React.FC = () => {\n  const canvasRef = useRef<HTMLCanvasElement | null>(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n\n    if (!canvas) {\n      return;\n    }\n\n    const WIDTH = canvas.width;\n    const HEIGHT = canvas.height;\n    const dpr = window.devicePixelRatio || 1;\n    const ctx: CanvasRenderingContext2D | null = canvas.getContext('2d');\n\n    if (!ctx) {\n      return;\n    }\n\n    canvas.width = WIDTH * dpr;\n    canvas.height = HEIGHT * dpr;\n    ctx.scale(dpr, dpr);\n    canvas.style.width = WIDTH + 'px';\n    canvas.style.height = HEIGHT + 'px';\n\n    const RADIUS = 100;\n    let angle = 0;\n    let hours = 0;\n    let minutes = 0;\n    let seconds = 0;\n\n    const getRadians = (degrees: number) => (Math.PI / 180) * degrees;\n\n    const draw = () => {\n      hours = new Date().getHours();\n      minutes = new Date().getMinutes();\n      seconds = new Date().getSeconds();\n      // ctx.beginPath();\n      // ctx.arc(WIDTH / 2, HEIGHT / 2, RADIUS, 0, getRadians(360));\n      // ctx.stroke();\n\n      for (angle = 0; angle < 360; angle += 6) {\n        ctx.save();\n        ctx.translate(WIDTH / 2, HEIGHT / 2);\n        ctx.rotate(getRadians(angle));\n        ctx.beginPath();\n        ctx.moveTo(0, -RADIUS);\n\n        if (angle % 30 === 0) {\n          ctx.lineTo(0, -RADIUS + 10);\n          ctx.lineWidth = 2;\n          // 1-12\n          ctx.font = '13px Arial';\n          ctx.textAlign = 'center';\n          ctx.fillText((angle / 30 || 12).toString(), 0, -RADIUS + 25);\n        } else {\n          ctx.lineTo(0, -RADIUS + 5);\n        }\n\n        ctx.stroke();\n        ctx.restore();\n\n        // hours * 30 + minutes * 0.5\n        ctx.save();\n        ctx.lineWidth = 6;\n        ctx.translate(WIDTH / 2, HEIGHT / 2);\n        ctx.rotate(getRadians(hours * 30 + minutes * 0.5));\n        ctx.beginPath();\n        ctx.moveTo(0, 10);\n        ctx.lineTo(0, -RADIUS + 50);\n        ctx.stroke();\n        ctx.restore();\n\n        // minutes * 6\n        ctx.save();\n        ctx.lineWidth = 4;\n        ctx.translate(WIDTH / 2, HEIGHT / 2);\n        ctx.rotate(getRadians(minutes * 6));\n        ctx.beginPath();\n        ctx.moveTo(0, 10);\n        ctx.lineTo(0, -RADIUS + 30);\n        ctx.stroke();\n        ctx.restore();\n\n        // seconds * 6\n        ctx.save();\n        ctx.strokeStyle = 'red';\n        ctx.translate(WIDTH / 2, HEIGHT / 2);\n        ctx.rotate(getRadians(seconds * 6));\n        ctx.beginPath();\n        ctx.moveTo(0, 10);\n        ctx.lineTo(0, -RADIUS + 20);\n        ctx.stroke();\n        ctx.restore();\n      }\n    };\n\n    const update = () => {\n      ctx.clearRect(0, 0, WIDTH, HEIGHT);\n      draw();\n      setTimeout(() => {\n        update();\n      }, 100);\n    };\n\n    update();\n  }, []);\n\n  return <canvas width=\"300\" height=\"260\" ref={canvasRef} />;\n};\n\nexport default AnalogWatch;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport AnalogWatch from './AnalogWatch';\n\nReactDOM.render(<AnalogWatch />, document.getElementById('root'));\n"],"sourceRoot":""}